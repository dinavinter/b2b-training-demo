Index: pyton/auth_server.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#pip install flask flask_sslify flask_cors requests \r\n\r\n\r\nfrom flask import Flask, Response, make_response, request\r\nfrom flask_sslify import SSLify\r\nfrom flask_cors import CORS\r\nimport os\r\nimport requests\r\n\r\nfrom client_jwt import create_client_jwt\r\n\r\napp = Flask(__name__)\r\nCORS(app)\r\nsslify = SSLify(app)\r\n\r\n@app.route(\"/\")\r\ndef hello():\r\n    return \"Auth server!\"\r\n    \r\n@app.route(\"/token/<api_key>/<app_id>/<org_id>/<uid>\", methods=[\"GET\", \"POST\"])\r\ndef auth_token(api_key, app_id, org_id, uid):            \r\n    plainId = \"us1api.b2b-gigya.com\"\r\n    CLIENT_ID = \"OvHHZLi5dcoVQP3iR60e2LHTUPuFPxJ8\"\r\n    CLIENT_SECRET = \"5nAHJTrNukzEpOA74snLmRLWQkhvGOwI\"\r\n    client_id = CLIENT_ID\r\n    client_secret = CLIENT_SECRET\r\n    \r\n    auth_msg = {\r\n        \"identity\": {\r\n            \"type\" :\"user\",\r\n            \"id\":  uid\r\n        },\r\n        \"context\": {\r\n            \"organization\":  org_id\r\n        }\r\n    }\r\n    \r\n    URL = \"https://{plainId}/runtime/{api_key}/authorization/token/{app_id}\".format(**locals());\r\n    encoded_jwt = create_client_jwt(client_id, client_secret)    \r\n    resp = requests.post(URL, json=auth_msg, headers={\"Authorization\": \"Bearer %s\" % (encoded_jwt)})\r\n    res = make_response(resp.content)\r\n    res.headers = dict(resp.headers)\r\n    return res, resp.status_code\r\n\r\n        \r\nif __name__ == \"__main__\":\r\n    context = ('server3.crt', 'server3.key')\r\n    app.run( debug = True, ssl_context = context, port=443)\r\n    #app.run( debug = True, ssl_context = 'adhoc')  # Generate Adhoc Certs
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- pyton/auth_server.py	(revision 99820c12cae7cee1fce91d8f079155d2e7da9935)
+++ pyton/auth_server.py	(date 1560666143689)
@@ -45,5 +45,5 @@
         
 if __name__ == "__main__":
     context = ('server3.crt', 'server3.key')
-    app.run( debug = True, ssl_context = context, port=443)
+    app.run( debug = True, ssl_context = context, port=4580)
     #app.run( debug = True, ssl_context = 'adhoc')  # Generate Adhoc Certs
\ No newline at end of file
